// Generated by CoffeeScript 1.3.3
var accessors, bind, chain, emmiter, handle, _ref;

_ref = require('tools/object'), bind = _ref.bind, chain = _ref.chain, accessors = _ref.accessors, emmiter = _ref.emmiter;

handle = {
  _$g: null,
  _target: null,
  _xScale: [],
  _yScale: [],
  _$handle: null,
  _$canvas: null,
  _areaWidth: 0,
  _areaHeight: 0,
  _offsetX: 0,
  _offsetY: 0,
  _hit: false,
  create: function() {
    var accessorList, instance;
    accessorList = ['id', 'data', 'bind', 'domain', 'xDomain', 'yDomain', 'clamp', 'xClamp', 'yClamp', 'x', 'y', 'width', 'height', 'top', 'left', 'targetMode', 'modes', 'select', 'color', 'pad', 'fill', 'step'];
    instance = chain(Object.create(this)).use(emmiter).use(accessors, accessorList).and(bind, ['_mouseDown', '_mouseUp', 'update']).targetMode(true).left(0).top(0).color("steelblue");
    instance._modes = ['x', 'y'];
    return instance;
  },
  _load: function(surface) {
    this._surface = surface;
    this._el = surface._el;
    this._areaWidth = surface.width();
    this._areaHeight = surface.height();
    this._surface.on('mousedown', this._mouseDown);
    this._surface.on('mouseup', this._mouseUp);
    this._surface.on('mousemove', this.update);
    return this.load();
  },
  _mouseDown: function(e) {
    this._hit = this._hitTest(e);
    return this.update(e);
  },
  _mouseUp: function(e) {
    return this._hit = false;
  },
  _isClicked: function(e) {
    var node;
    if (!e) {
      return false;
    }
    node = e.target || e;
    if (node === this._g || node === this._target) {
      return true;
    }
    return this._isClicked(node.parentNode);
  },
  _hitTest: function(e) {
    var bottom, hit, left, right, srf, top;
    hit = false;
    srf = this._surface;
    if (!e) {
      return hit;
    }
    if (this.targetMode()) {
      hit = this._isClicked(e);
    } else {
      if (!!~this._modes.indexOf('y')) {
        left = this.left() - this.pad();
        right = this.left() + this.width() + this.pad();
        hit = srf.x >= left && srf.x <= right && srf.which === 1;
      } else {
        top = this.top() - this.pad();
        bottom = this.top() + this.height() + this.pad();
        hit = srf.y >= top && srf.y <= bottom && srf.which === 1;
      }
    }
    return this._hit = hit;
  },
  update: function() {
    return {};
  },
  load: function() {
    return {};
  }
};

module.exports = handle;
