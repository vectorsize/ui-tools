// Generated by CoffeeScript 1.3.3
var $, Handle, accessors, bind, chain, emmiter, scale, slugify, _ref;

$ = require('sizzle');

_ref = require('tools/object'), bind = _ref.bind, chain = _ref.chain, accessors = _ref.accessors, emmiter = _ref.emmiter;

scale = require('tools/d3-scales').scale;

slugify = require('slugify');

Handle = (function() {

  Handle.prototype._x = 0;

  Handle.prototype._y = 0;

  Handle.prototype.id = null;

  Handle.prototype.$el = null;

  Handle.prototype.el = null;

  Handle.prototype.context = null;

  Handle.prototype.canvas = null;

  Handle.prototype.handle = null;

  Handle.prototype.xscale = null;

  Handle.prototype.yscale = null;

  Handle.prototype.width = 0;

  Handle.prototype.height = 0;

  function Handle() {
    var accessorList, defScales;
    if (!(this instanceof Handle)) {
      return new Handle;
    }
    accessorList = ['xdomain', 'ydomain', 'xrange', 'yrange', 'top', 'right', 'bottom', 'left', 'clamps'];
    chain(this).use(emmiter).use(accessors, accessorList);
    this.top(0);
    this.right(0);
    this.bottom(0);
    this.left(0);
    this.clamps(true);
    this.offsetx = 0;
    this.offsety = 0;
    this.xscale = scale.linear();
    this.yscale = scale.linear();
    defScales = [0, 1];
    this.xdomain(defScales, defScales);
    this.xrange(defScales, defScales);
    this.ydomain(defScales, defScales);
    this.yrange(defScales, defScales);
    this.domain(defScales, defScales);
    this.range(defScales, defScales);
    this.updateScales();
  }

  Handle.prototype.updateScales = function() {
    this.xscale.domain(this.xdomain()).range(this.xrange());
    this.yscale.domain(this.ydomain()).range(this.yrange());
  };

  Handle.prototype.flip = function(which) {
    var range;
    range = "" + which + "range";
    this[range]([this[range]()[1], this[range]()[0]]);
    return console.log(this[range]());
  };

  Handle.prototype.domain = function(xval, yval) {
    var y;
    if (xval == null) {
      xval = null;
    }
    if (yval == null) {
      yval = null;
    }
    if (xval === null) {
      return [this.xdomain(), this.ydomain()];
    }
    this.xdomain(xval);
    y = yval === null ? xval : yval;
    this.ydomain(y);
    this.updateScales();
    return this;
  };

  Handle.prototype.range = function(xval, yval) {
    var y;
    if (xval == null) {
      xval = null;
    }
    if (yval == null) {
      yval = null;
    }
    if (xval === null) {
      return [this.xrange(), this.yrange()];
    }
    this.xrange(xval);
    y = yval === null ? xval : yval;
    this.yrange(y);
    this.updateScales();
    return this;
  };

  Handle.prototype.clamp = function(value, extent) {
    var max, min;
    min = extent[0];
    max = extent[1];
    if (value <= min || value >= max) {
      return Math.min(Math.max(value, Math.min(min, max)), Math.max(min, max));
    }
    return value;
  };

  Handle.prototype.x = function(v) {
    if (v == null) {
      v = null;
    }
    if (v === null) {
      return this._x;
    }
    this._x = this.clamps() ? this.clamp(v, this.xdomain()) : v;
    return this;
  };

  Handle.prototype.y = function(v) {
    if (v == null) {
      v = null;
    }
    if (v === null) {
      return this._y;
    }
    this._y = this.clamps() ? this.clamp(v, this.ydomain()) : v;
    return this;
  };

  Handle.prototype.select = function(sel) {
    this.$el = $(sel);
    this.el = this.$el[0];
    this.id = slugify(sel);
    return this;
  };

  Handle.prototype.append = function() {
    this.margin = {
      top: this.top(),
      right: this.right(),
      bottom: this.bottom(),
      left: this.left()
    };
    this.offsetx = this.margin.left + this.margin.right;
    this.offsety = this.margin.top + this.margin.bottom;
    this.width = this._xdomain[1] - this.offsetx;
    this.height = this._ydomain[1] - this.offsety;
    this._xdomain[0] = this.margin.left;
    this._ydomain[0] = this.margin.top;
    this._xdomain[1] = this.width;
    this._ydomain[1] = this.height;
    return this.updateScales();
  };

  Handle.prototype.xToData = function(v) {
    return this.xscale(v);
  };

  Handle.prototype.xToPixel = function(v) {
    return this.xscale.invert(v);
  };

  Handle.prototype.yToData = function(v) {
    return this.yscale(v);
  };

  Handle.prototype.yToPixel = function(v) {
    return this.yscale.invert(v);
  };

  Handle.prototype.rotate = function() {};

  Handle.prototype.update = function() {};

  return Handle;

})();

module.exports = Handle;
