// Generated by CoffeeScript 1.9.0
var Surface, UILoop, accessors, bind, chain, emmiter, int, ref, ref1, uid;

ref = require('tools/object'), bind = ref.bind, chain = ref.chain, accessors = ref.accessors, emmiter = ref.emmiter;

ref1 = require('utils'), uid = ref1.uniqueId, UILoop = ref1.UILoop;

int = function(string) {
  return parseInt(string, 10) || 0;
};

Surface = (function() {
  Surface.prototype.el = null;

  Surface.prototype.target = null;

  Surface.prototype.clicked = false;

  Surface.prototype.offsetX = 0;

  Surface.prototype.offsetY = 0;

  Surface.prototype.elements = [];

  Surface.prototype.anchor = {
    x: 0,
    y: 0
  };

  function Surface() {
    if (!(this instanceof Surface)) {
      return new Surface();
    }
    chain(this).use(emmiter).use(accessors, ['width', 'height'], true).and(bind, ['mouseDown', 'mouseUp', 'mouseMove']);
    this.clicked = false;
    this.elements = [];
    this.scrollLeft = 0;
    this.scrollTop = 0;
  }

  Surface.prototype.isClicked = function(e) {
    var node;
    if (!e) {
      return false;
    }
    node = e.target || e;
    if (node === this.el) {
      return true;
    }
    return this.isClicked(node.parentNode);
  };

  Surface.prototype.listeners = function(target, action) {
    if (action == null) {
      action = 'add';
    }
    target[action + "EventListener"]('mouseleave', this.mouseUp);
    target[action + "EventListener"]('mouseup', this.mouseUp);
    return target[action + "EventListener"]('mousemove', this.mouseMove);
  };

  Surface.prototype.updateOffsets = function() {
    this.scrollTop = window.pageYOffset - document.documentElement.clientTop;
    return this.scrollLeft = window.pageXOffset - document.documentElement.clientLeft;
  };

  Surface.prototype.mouseDown = function(e) {
    var clicked;
    this.listeners(document.body, 'add');
    clicked = this.clicked = this.isClicked(e);
    if (clicked) {
      this.updateOffsets();
      this.anchor = {
        x: e.x,
        y: e.y
      };
      return this.emit('mousedown', this.formatEvent(e));
    }
  };

  Surface.prototype.computePositions = function(e) {
    return {
      x: (e.x - this.offsetX) + this.scrollLeft,
      y: (e.y - this.offsetY) + this.scrollTop
    };
  };

  Surface.prototype.formatEvent = function(e) {
    var delta, ref2, target, x, y;
    target = e.target || e.relatedTarget || e.fromElement || e.toElement;
    this.target = target;
    delta = e.delta;
    ref2 = this.computePositions(e), x = ref2.x, y = ref2.y;
    return {
      x: x,
      y: y,
      target: target,
      delta: delta,
      originalEvent: e
    };
  };

  Surface.prototype.mouseMove = function(e) {
    e.delta = {
      x: e.x - this.anchor.x,
      y: e.y - this.anchor.y
    };
    return this.emit('mousedrag', this.formatEvent(e));
  };

  Surface.prototype.mouseUp = function(e) {
    this.clicked = false;
    this.anchor = {
      x: 0,
      y: 0
    };
    this.emit('mouseup', e);
    return this.listeners(document.body, 'remove');
  };

  Surface.prototype.offsets = function(styles, which) {
    var b, m, p;
    m = int(styles["margin-" + which]);
    p = int(styles["padding-" + which]);
    b = int(styles["border-" + which + "-width"]);
    return {
      m: m,
      b: b,
      p: p
    };
  };

  Surface.prototype.select = function(selector) {
    var bb, bl, br, bt, clientRect, el, mb, ml, mr, mt, pb, pl, pr, pt, ref2, ref3, ref4, ref5, styles;
    if (selector == null) {
      selector = null;
    }
    if (!selector) {
      return new Error('An element querySelector must be specified.');
    }
    el = document.querySelector(selector);
    el.innerHTML = '';
    el.addEventListener('mousedown', this.mouseDown);
    styles = window.getComputedStyle(el);
    clientRect = el.getBoundingClientRect();
    ref2 = this.offsets(styles, 'top'), mt = ref2.m, bt = ref2.b, pt = ref2.p;
    ref3 = this.offsets(styles, 'right'), mr = ref3.m, br = ref3.b, pr = ref3.p;
    ref4 = this.offsets(styles, 'bottom'), mb = ref4.m, bb = ref4.b, pb = ref4.p;
    ref5 = this.offsets(styles, 'left'), ml = ref5.m, bl = ref5.b, pl = ref5.p;
    this.offsetX = clientRect.left + (ml + bl + pl);
    this.offsetY = clientRect.top + (mt + bt + pt);
    this.width(clientRect.width - ((bl + pl) + (br + pr)));
    this.height(clientRect.height - ((bt + pt) + (bb + pb)));
    this.el = el;
    this.target = el;
    return this;
  };

  return Surface;

})();

module.exports = Surface;

//# sourceMappingURL=surface.js.map
