// Generated by CoffeeScript 1.3.3
var Surface, UILoop, accessors, bind, chain, emmiter, int, uid, _ref, _ref1;

_ref = require('tools/object'), bind = _ref.bind, chain = _ref.chain, accessors = _ref.accessors, emmiter = _ref.emmiter;

_ref1 = require('utils'), uid = _ref1.uniqueId, UILoop = _ref1.UILoop;

int = function(string) {
  return parseInt(string, 10) || 0;
};

Surface = (function() {

  Surface.prototype.el = null;

  Surface.prototype.target = null;

  Surface.prototype.clicked = false;

  Surface.prototype.offsetX = 0;

  Surface.prototype.offsetY = 0;

  Surface.prototype.elements = [];

  function Surface() {
    if (!(this instanceof Surface)) {
      return new Surface();
    }
    chain(this).use(emmiter).use(accessors, ['width', 'height'], true).and(bind, ['mouseDown', 'mouseUp', 'mouseMove']);
    this.clicked = false;
    this.elements = [];
    this.scrollLeft = 0;
    this.scrollTop = 0;
  }

  Surface.prototype.isClicked = function(e) {
    var node;
    if (!e) {
      return false;
    }
    node = e.target || e;
    if (node === this.el) {
      return true;
    }
    return this.isClicked(node.parentNode);
  };

  Surface.prototype.listeners = function(target, action) {
    if (action == null) {
      action = 'add';
    }
    target["" + action + "EventListener"]('mouseleave', this.mouseUp);
    target["" + action + "EventListener"]('mouseup', this.mouseUp);
    return target["" + action + "EventListener"]('mousemove', this.mouseMove);
  };

  Surface.prototype.updateOffsets = function() {
    this.scrollTop = window.pageYOffset - document.documentElement.clientTop;
    return this.scrollLeft = window.pageXOffset - document.documentElement.clientLeft;
  };

  Surface.prototype.mouseDown = function(e) {
    var clicked;
    this.listeners(document.body, 'add');
    clicked = this.clicked = this.isClicked(e);
    if (clicked) {
      this.updateOffsets();
      return this.emit('mousedown', this.formatEvent(e));
    }
  };

  Surface.prototype.formatEvent = function(e) {
    var target, x, y;
    x = this.x = (e.x - this.offsetX) + this.scrollLeft;
    y = this.y = (e.y - this.offsetY) + this.scrollTop;
    target = this.target = e.target;
    this.which = e.which;
    return {
      x: x,
      y: y,
      target: target,
      originalEvent: e
    };
  };

  Surface.prototype.mouseMove = function(e) {
    return this.emit('mousedrag', this.formatEvent(e));
  };

  Surface.prototype.mouseUp = function(e) {
    this.clicked = false;
    this.emit('mouseup', e);
    return this.listeners(document.body, 'remove');
  };

  Surface.prototype.offsets = function(styles, which) {
    var b, m, p;
    m = int(styles["margin-" + which]);
    p = int(styles["padding-" + which]);
    b = int(styles["border-" + which + "-width"]);
    return {
      m: m,
      b: b,
      p: p
    };
  };

  Surface.prototype.select = function(selector) {
    var bb, bl, br, bt, clientRect, el, mb, ml, mr, mt, pb, pl, pr, pt, styles, _ref2, _ref3, _ref4, _ref5;
    if (selector == null) {
      selector = null;
    }
    if (!selector) {
      return new Error('An element querySelector must be specified.');
    }
    el = document.querySelector(selector);
    el.innerHTML = '';
    el.addEventListener('mousedown', this.mouseDown);
    styles = window.getComputedStyle(el);
    clientRect = el.getBoundingClientRect();
    _ref2 = this.offsets(styles, 'top'), mt = _ref2.m, bt = _ref2.b, pt = _ref2.p;
    _ref3 = this.offsets(styles, 'right'), mr = _ref3.m, br = _ref3.b, pr = _ref3.p;
    _ref4 = this.offsets(styles, 'bottom'), mb = _ref4.m, bb = _ref4.b, pb = _ref4.p;
    _ref5 = this.offsets(styles, 'left'), ml = _ref5.m, bl = _ref5.b, pl = _ref5.p;
    this.offsetX = clientRect.left + (ml + bl + pl);
    this.offsetY = clientRect.top + (mt + bt + pt);
    this.width(clientRect.width - ((bl + pl) + (br + pr)));
    this.height(clientRect.height - ((bt + pt) + (bb + pb)));
    this.el = el;
    this.target = el;
    return this;
  };

  return Surface;

})();

module.exports = Surface;
