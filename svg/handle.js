// Generated by CoffeeScript 1.3.3
var d3, handle, handleSVG;

handle = require('ui-lib/handle');

d3 = require('d3');

handleSVG = Object.assign(handle, {
  load: function() {
    var $canvas, $g, $svg, h, height, margin, offsetX, offsetY, w, width;
    this._xScale = d3.scale.linear().clamp(true);
    this._yScale = d3.scale.linear().clamp(true);
    w = this.width() * 0.5;
    h = this.height() * 0.5;
    margin = {
      top: h,
      right: w,
      bottom: h,
      left: w
    };
    offsetX = this._offsetX = margin.left + margin.right;
    offsetY = this._offsetY = margin.top + margin.bottom;
    width = this._areaWidth - offsetX;
    height = this._areaHeight - offsetY;
    $canvas = this._$canvas = d3.select(this._el);
    $svg = ($canvas.select('svg')[0][0] && $canvas.select('svg') || $canvas.append('svg')).attr("width", width + offsetX).attr("height", height + offsetY);
    $g = this._$g = this.select() && $svg.select(this.select()) || $svg.append("g").attr('id', this.id());
    this._$target = this.appendTarget($g);
    this._target = this._$target[0][0];
    this._g = this._$g[0][0];
    this._fixScales();
    if (!!~this._modes.indexOf('x')) {
      margin.top += this.top();
    }
    if (!!~this._modes.indexOf('y')) {
      margin.left += this.left();
    }
    this._$g.attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
    return this.draw();
  },
  _hasMode: function(which) {
    return !!~this._modes.indexOf(which);
  },
  _removeMode: function(name) {
    var idx;
    idx = this._modes.indexOf(name);
    return this._modes.splice(idx, 1);
  },
  _fixScales: function() {
    var empty, xRange, yRange;
    xRange = [0, this._areaWidth - this._offsetX];
    yRange = [this._areaHeight - this._offsetY, 0];
    empty = [0, 0];
    this._xScale.domain(xRange).range(xRange);
    this._yScale.domain(yRange).range(yRange);
    if (!!this.xDomain()) {
      this._xScale.domain(this.xDomain());
    } else if (!!this.domain()) {
      this._xScale.domain(this.domain());
    } else {
      this._xScale.range(empty);
    }
    if (!!this.yDomain()) {
      return this._yScale.domain(this.yDomain());
    } else if (!!this.domain()) {
      return this._yScale.domain(this.domain());
    } else {
      return this._yScale.range(empty);
    }
  },
  appendTarget: function($g) {
    return $g;
  },
  update: function(e, callee) {
    var h, sx, sy, w, x, xMax, xMin, y, yMax, yMin, _ref, _ref1;
    if (!e) {
      return;
    }
    if (!(this.targetMode() ? this._hit : this._hitTest(e))) {
      return;
    }
    x = e.x, y = e.y;
    h = this.height() * 0.5;
    w = this.width() * 0.5;
    x -= w;
    y -= h;
    sx = this._xScale.invert(x);
    sy = this._yScale.invert(y);
    _ref = this.xClamp() || this.clamp() || this._xScale.domain(), xMin = _ref[0], xMax = _ref[1];
    _ref1 = this.yClamp() || this.clamp() || this._yScale.domain(), yMin = _ref1[0], yMax = _ref1[1];
    if (sx >= xMax) {
      sx = xMax;
    }
    if (sx <= xMin) {
      sx = xMin;
    }
    if (sy >= yMax) {
      sy = yMax;
    }
    if (sy <= yMin) {
      sy = yMin;
    }
    if (this._hasMode('x')) {
      this.x(sx);
    }
    if (this._hasMode('y')) {
      this.y(sy);
    }
    this.emit('change', "value-" + (this.id()), {
      x: sx,
      y: sy
    });
    return this.draw();
  },
  draw: function(changes) {
    var dx, dy, tx, ty;
    dx = this.x() || 0;
    dy = this.y() || 0;
    tx = this._xScale(dx);
    ty = this._yScale(dy);
    ty -= this.height() * 0.5;
    tx -= this.width() * 0.5;
    if (this.fill() && this._hasMode('y')) {
      this._$handle.attr('height', this._surface.height() - ty);
    }
    if (this.fill() && this._hasMode('x')) {
      this._$handle.attr('width', tx + this.width() * 2);
      tx -= this._$handle.attr('width') - this.width();
    }
    return this._$handleView.attr('transform', "translate(" + tx + ", " + ty + ")");
  }
});

module.exports = handleSVG;
