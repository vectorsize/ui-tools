// Generated by CoffeeScript 1.9.0
var Handle, HandleSVG, d3, plane,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Handle = require('ui-lib/handle');

plane = require('ui-lib/svg/plane');

d3 = require('d3');

HandleSVG = (function(superClass) {
  extend(HandleSVG, superClass);

  function HandleSVG() {
    if (!(this instanceof HandleSVG)) {
      return new HandleSVG;
    }
    HandleSVG.__super__.constructor.call(this);
  }

  HandleSVG.prototype.isClicked = function(e) {
    var node;
    if (!e) {
      return false;
    }
    node = !!e.target ? e.target : e;
    if (node === this.shapeEl) {
      return true;
    }
    return this.isClicked(node.parentNode);
  };

  HandleSVG.prototype.draw = function(shape) {
    var context;
    this.shape = shape;
    this.canvas = d3.select(this.el).append('svg');
    this.canvas.attr("width", this.width() + this.offsetx).attr("height", this.height() + this.offsety);
    context = plane().id(this.id).top(this.top()).left(this.left()).right(this.right()).bottom(this.bottom());
    this.xscale = context.xscale();
    this.yscale = context.yscale();
    this.context = context.mount(this.canvas);
    return this.el = this.shape.draw(this);
  };

  HandleSVG.prototype.update = function(e) {
    return this.shape.x(this.x()).update();
  };

  return HandleSVG;

})(Handle);

module.exports = HandleSVG;

//# sourceMappingURL=handle.js.map
